[game]

# Player 1's and Player 2's Names
PLAYER_1         = Rose
PLAYER_2         = Colin

# 'True' to solve for mixed strategies. 
# 'False' to solve for pure strategies. 
MIXED_STRATEGIES = True

[poker]

# Set the ante, bet, and raise values
ANTE  = 1
BET   = 2
RAISE = 2

[manila]

# 'True' if ace card should be treated like a high card and a low card in a straight when the laowest card is not a two
# 'False' if ace card should be treated only like a high card in a straight
ACE_WRAPS   = True

# the value of the lowest card
# 2 = 2
# ...
# 10 = 10
# 11 = J
# 12 = Q
# therefore, integers from [2,12] are accepted 
LOWEST_CARD = 12

[personal]
# the value of the highest card
# 4 = 4
# ...
# 12 = Q
# 13 = K
# 14 = A
# therefore, integers from [4,14] are accepted 
HIGHEST_CARD     = 14

# the number of suits 
# integers from [2,4] are accepted 
NUMBER_OF_SUITS  = 4

# the number of action rounds 
# integers from [2,4] are accepted 
NUMBER_OF_ROUNDS = 4

[files-paths]

# various names for directories
PARENT_DIRECTORY        = ..
SAVED_GAMES_DIRECTORY   = saved
OUTPUTS_DIRECTORY       = output

# this value requires a set of curly braces for the date specifier
OUTPUT_DIRECTORY        = Outputs-Manila-Poker-{}
ORIGINAL_GAME_TREE_FILE = Original-Game-Tree.nfg
REDUCED_GAME_TREE_FILE  = Reduced-Game-Tree.nfg
EXPECTED_VALUES_FILE    = Expected-Values.txt
SOLUTIONS_FILE          = Solved-Game-Solutions.txt

[testing]

# 'True' Bring up the debug console when running the program
# 'False' Do not bring up the debug console when runnign the program
DEBUG             = True

# 'True' Use short labels for nodes. This is ideal if you'd like to see the output in the gambit program.
# 'False' Use long labels for nodes. This is ideal if you'd like to see the output be readable in the .nfg file itself (for debugging purposes).
SHORT_LABELS      = True

# 'PLAYER_1' if you'd like to focus the game on player 1.
# 'PLAYER_2' if you'd like to focus the game on player 2.
PLAYER            = PLAYER_1

# Specific card draws require a list of specific length (2 for Hole, 3 for Flop, 1 for Turn, 1 for River). 
# The items in the list should be valid card labels.
# Specific actions require a list of valid actions. 
# List of all possible sequences of complete actions
# valid_complete_actions = [
#     ["B", "R", "K"],
#     ["B", "R", "F"],
#     ["B", "K"],
#     ["B", "F"],
#     ["C", "B", "K"],
#     ["C", "B", "F"],
#     ["C", "C"]
# ]
# List of all possible sequences of incomplete actions
# valid_incomplete_actions = [
#     ["B", "R"],
#     ["B"],
#     ["C", "B"],
#     ["C"],
#     []
# ]
# An incomplete list must be followed by empty lists ([])
#SPECIFIC_HOLE     = ["Qh","Kd"]
#SPECIFIC_ACTIONS1 = ["B", "R", "K"]
#SPECIFIC_FLOP     = ["Qd","Ah","Kh"]
#SPECIFIC_ACTIONS2 = ["B", "K"]
#SPECIFIC_TURN     = ["Jh"]
#SPECIFIC_ACTIONS3 = ["C", "B", "K"]
#SPECIFIC_RIVER    = ["Jd"]
#SPECIFIC_ACTIONS4 = []

SPECIFIC_HOLE     = ["Qh","Kd"]
SPECIFIC_ACTIONS1 = ["B", "R", "K"]
SPECIFIC_FLOP     = ["Qd","Ah","Kh"]
SPECIFIC_ACTIONS2 = ["B", "K"]
SPECIFIC_TURN     = ["Qc"]
SPECIFIC_ACTIONS3 = ["C", "B", "K"]
SPECIFIC_RIVER    = ["Ad"]
SPECIFIC_ACTIONS4 = []
